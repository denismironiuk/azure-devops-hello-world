trigger:
  branches:
    include:
      - main   # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è

pool:
  name: Default   # self-hosted –∞–≥–µ–Ω—Ç

variables:
  buildConfiguration: 'Release'
  buildVersion: '1.0.$(Build.BuildId)'
  artifactName: 'HelloWorld-$(buildVersion)'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: Build
  displayName: 'üèóÔ∏è Build & Analyze'
  jobs:
  - job: BuildJob
    displayName: 'Build and SonarQube Analysis'
    steps:

    # 1Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    - checkout: self
      displayName: 'üì• Checkout repository'

    # 2Ô∏è‚É£ –ö—ç—à NuGet –ø–∞–∫–µ—Ç–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        restoreKeys: |
          nuget | "$(Agent.OS)"
        path: $(NUGET_PACKAGES)
      displayName: 'üíæ Cache NuGet packages'
      continueOnError: true

    # 3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ .NET SDK
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
      displayName: '‚öôÔ∏è Install .NET 9 SDK'

    # 4Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ SonarQube (Community Edition, –±–µ–∑ branch.name)
    - task: SonarQubePrepare@4    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç–∞ –≤–µ—Ç–æ–∫
      inputs:
        SonarQube: 'SonarQubeConnection'
        scannerMode: 'MSBuild'
        projectKey: 'HelloWorld'
        projectName: 'HelloWorld'
        projectVersion: '$(buildVersion)'
        extraProperties: |
          sonar.projectBaseDir=$(Build.SourcesDirectory)
          sonar.sourceEncoding=UTF-8
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
          sonar.coverage.exclusions=**/*Tests.cs,**/Program.cs
          sonar.branch.name=
      displayName: 'üîç Prepare SonarQube Analysis (Community Edition)'

    # 5Ô∏è‚É£ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - script: |
        echo "üîß Restoring dependencies..."
        dotnet restore ./HelloWorld/HelloWorld.csproj
      displayName: 'üì¶ Restore dependencies'

    # 6Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    - script: |
        echo "‚öôÔ∏è Building project..."
        dotnet build ./HelloWorld/HelloWorld.csproj \
          --configuration $(buildConfiguration) \
          --no-restore \
          /p:Version=$(buildVersion)
      displayName: 'üî® Build project'

    # 7Ô∏è‚É£ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¢–µ—Å—Ç—ã ‚Äî –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    # - script: |
    #     echo "üß™ Running tests with code coverage..."
    #     dotnet test ./HelloWorld/HelloWorld.csproj \
    #       --configuration $(buildConfiguration) \
    #       --no-build \
    #       --logger trx \
    #       --collect:"XPlat Code Coverage" \
    #       --results-directory $(Agent.TempDirectory)/TestResults \
    #       -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
    #   displayName: 'üß™ Run tests with coverage'

    # 8Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ SonarQube
    - task: SonarQubeAnalyze@4
      displayName: 'üìä Run SonarQube Analysis'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    # 9Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Quality Gate
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'üì¢ Publish Quality Gate Result'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    # üîü –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    - script: |
        echo "üì¶ Publishing application..."
        dotnet publish ./HelloWorld/HelloWorld.csproj \
          --configuration $(buildConfiguration) \
          --output $(Build.ArtifactStagingDirectory)/app \
          --no-build \
          /p:Version=$(buildVersion)
      displayName: 'üì§ Publish application'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/app'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
        replaceExistingArchive: true
      displayName: 'üì¶ Create artifact archive'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      displayName: 'üöÄ Upload artifact to Azure DevOps'

    # ‚úÖ –ò—Ç–æ–≥
    - script: |
        echo "=========================================="
        echo "‚úÖ Build completed successfully!"
        echo "=========================================="
        echo "üìå Build Version: $(buildVersion)"
        echo "üìå Artifact Name: $(artifactName).zip"
        echo "üìå Configuration: $(buildConfiguration)"
        echo "=========================================="
      displayName: 'üìã Build Summary'
