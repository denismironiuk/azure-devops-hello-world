trigger:
  - main

pool:
  name: Default   # self-hosted –∞–≥–µ–Ω—Ç

variables:
  buildConfiguration: 'Release'
  buildVersion: '1.0.$(Build.BuildId)'
  artifactName: 'HelloWorld-$(buildVersion)'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: Build
  displayName: 'üèóÔ∏è Build & Analyze'
  jobs:
  - job: BuildJob
    displayName: 'Build and SonarQube Analysis'
    steps:
    
    # 1Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    - checkout: self
      displayName: 'üì• Checkout repository'
    
    # 2Ô∏è‚É£ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ NuGet –ø–∞–∫–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - task: Cache@2
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/HelloWorld.csproj'
        restoreKeys: |
          nuget | "$(Agent.OS)"
        path: $(NUGET_PACKAGES)
      displayName: 'üíæ Cache NuGet packages'
      continueOnError: true
    
    # 3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ .NET SDK
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
      displayName: '‚öôÔ∏è Install .NET 9 SDK'
    
    # 4Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ SonarQube (Community Edition)
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQubeConnection'
        scannerMode: 'MSBuild'
        projectKey: 'HelloWorld'
        projectName: 'HelloWorld'
        projectVersion: '$(buildVersion)'
        extraProperties: |
          sonar.projectBaseDir=$(Build.SourcesDirectory)
          sonar.sourceEncoding=UTF-8
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
          sonar.coverage.exclusions=**/*Tests.cs,**/Program.cs
      displayName: 'üîç Prepare SonarQube Analysis (Community Edition)'
    
    # 5Ô∏è‚É£ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - script: |
        echo "üîß Restoring dependencies..."
        dotnet restore ./HelloWorld/HelloWorld.csproj
      displayName: 'üì¶ Restore dependencies'
    
    # 6Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    - script: |
        echo "‚öôÔ∏è Building project..."
        dotnet build ./HelloWorld/HelloWorld.csproj \
          --configuration $(buildConfiguration) \
          --no-restore \
          /p:Version=$(buildVersion)
      displayName: 'üî® Build project'
    
    # 7Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
    - script: |
        echo "üß™ Running tests with code coverage..."
        dotnet test ./HelloWorld/HelloWorld.csproj \
          --configuration $(buildConfiguration) \
          --no-build \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory $(Agent.TempDirectory)/TestResults \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      displayName: 'üß™ Run tests with coverage'
      continueOnError: false
    
    # 8Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/TestResults/**/*.trx'
        mergeTestResults: true
        failTaskOnFailedTests: true
      displayName: 'üìä Publish test results'
      condition: succeededOrFailed()
    
    # 9Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/TestResults/**/coverage.cobertura.xml'
      displayName: 'üìà Publish code coverage'
      condition: succeededOrFailed()
    
    # üîü –ê–Ω–∞–ª–∏–∑ SonarQube
    - task: SonarQubeAnalyze@5
      displayName: 'üìä Run SonarQube Analysis'
    
    # 1Ô∏è‚É£1Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SonarQube
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'üì¢ Publish Quality Gate Result'
    
    # 1Ô∏è‚É£2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Quality Gate (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    - script: |
        echo "‚è≥ Checking Quality Gate status..."
        echo "If Quality Gate fails, consider failing the build"
      displayName: '‚úÖ Verify Quality Gate'
      condition: succeeded()
    
    # 1Ô∏è‚É£3Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - script: |
        echo "üìÅ Publishing application..."
        dotnet publish ./HelloWorld/HelloWorld.csproj \
          --configuration $(buildConfiguration) \
          --output $(Build.ArtifactStagingDirectory)/app \
          --no-build \
          /p:Version=$(buildVersion)
      displayName: 'üì§ Publish application'
    
    # 1Ô∏è‚É£4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/app'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
        replaceExistingArchive: true
      displayName: 'üì¶ Create artifact archive'
    
    # 1Ô∏è‚É£5Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'
      displayName: 'üöÄ Upload artifact to Azure DevOps'
    
    # 1Ô∏è‚É£6Ô∏è‚É£ –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–µ
    - script: |
        echo "=========================================="
        echo "‚úÖ Build completed successfully!"
        echo "=========================================="
        echo "üìå Build Version: $(buildVersion)"
        echo "üìå Artifact Name: $(artifactName).zip"
        echo "üìå Configuration: $(buildConfiguration)"
        echo "=========================================="
      displayName: 'üìã Build Summary'
      condition: succeeded()
